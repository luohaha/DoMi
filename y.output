Terminals which are not used

   QUOT


Rules never reduced

    8 while_sentence: while_sentence

   10 sentence: sentence


State 8 conflicts: 7 reduce/reduce
State 22 conflicts: 7 reduce/reduce
State 81 conflicts: 6 reduce/reduce
State 87 conflicts: 6 reduce/reduce


Grammar

    0 $accept: all $end

    1 all: function_defun_exp
    2    | sentence
    3    | all function_defun_exp
    4    | all sentence

    5 block: while_sentence
    6      | block while_sentence

    7 while_sentence: eval SEMICOLON
    8               | while_sentence

    9 sentence: eval SEMICOLON
   10         | sentence

   11 eval: assign_expression
   12     | function_expression
   13     | while_expression

   14 statement_exp: INTEGER_M VAL_NAME
   15              | DOUBLE_M VAL_NAME

   16 statement_exp_list: statement_exp
   17                   | statement_exp_list COMMA statement_exp

   18 block_exp_list: eval
   19               | block_exp_list SEMICOLON eval

   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list SR BL block_exp_list BR
   21                   | FUNCTION_M VAL_NAME SL SR BL block_exp_list BR

   22 while_expression: WHILE_M SL expression SR BL block BR

   23 function_expression: VAL_NAME SL argument_list SR

   24 assign_expression: VAL_NAME ASSIGN expression
   25                  | INTEGER_M VAL_NAME ASSIGN expression
   26                  | DOUBLE_M VAL_NAME ASSIGN expression
   27                  | STRING_M VAL_NAME ASSIGN expression
   28                  | INTEGER_M VAL_NAME
   29                  | DOUBLE_M VAL_NAME
   30                  | STRING_M VAL_NAME

   31 argument: VAL_NAME

   32 argument_list: expression
   33              | argument_list COMMA expression

   34 expression: high_expression
   35           | expression ADD high_expression
   36           | expression SUB high_expression

   37 high_expression: compa_expression
   38                | high_expression MUL compa_expression
   39                | high_expression DIV compa_expression

   40 compa_expression: primary_exp
   41                 | compa_expression EQUAL primary_exp
   42                 | compa_expression BIG_EQL primary_exp
   43                 | compa_expression SMALL_EQL primary_exp
   44                 | compa_expression BIG primary_exp
   45                 | compa_expression SMALL primary_exp

   46 primary_exp: DOUBLE
   47            | INTEGER
   48            | argument


Terminals, with rules where they appear

$end (0) 0
error (256)
ADD (258) 35
SUB (259) 36
MUL (260) 38
DIV (261) 39
EQUAL (262) 41
ASSIGN (263) 24 25 26 27
SEMICOLON (264) 7 9 19
BL (265) 20 21 22
BR (266) 20 21 22
SL (267) 20 21 22 23
SR (268) 20 21 22 23
QUOT (269)
INTEGER_M (270) 14 25 28
DOUBLE_M (271) 15 26 29
STRING_M (272) 27 30
COMMA (273) 17 33
FUNCTION_M (274) 20 21
WHILE_M (275) 22
BIG_EQL (276) 42
SMALL_EQL (277) 43
BIG (278) 44
SMALL (279) 45
INTEGER (280) 47
DOUBLE (281) 46
VAL_NAME (282) 14 15 20 21 23 24 25 26 27 28 29 30 31


Nonterminals, with rules where they appear

$accept (28)
    on left: 0
all (29)
    on left: 1 2 3 4, on right: 0 3 4
block (30)
    on left: 5 6, on right: 6 22
while_sentence (31)
    on left: 7 8, on right: 5 6 8
sentence (32)
    on left: 9 10, on right: 2 4 10
eval (33)
    on left: 11 12 13, on right: 7 9 18 19
statement_exp (34)
    on left: 14 15, on right: 16 17
statement_exp_list (35)
    on left: 16 17, on right: 17 20
block_exp_list (36)
    on left: 18 19, on right: 19 20 21
function_defun_exp (37)
    on left: 20 21, on right: 1 3
while_expression (38)
    on left: 22, on right: 13
function_expression (39)
    on left: 23, on right: 12
assign_expression (40)
    on left: 24 25 26 27 28 29 30, on right: 11
argument (41)
    on left: 31, on right: 48
argument_list (42)
    on left: 32 33, on right: 23 33
expression (43)
    on left: 34 35 36, on right: 22 24 25 26 27 32 33 35 36
high_expression (44)
    on left: 37 38 39, on right: 34 35 36 38 39
compa_expression (45)
    on left: 40 41 42 43 44 45, on right: 37 38 39 41 42 43 44 45
primary_exp (46)
    on left: 46 47 48, on right: 40 41 42 43 44 45


state 0

    0 $accept: . all $end

    INTEGER_M   shift, and go to state 1
    DOUBLE_M    shift, and go to state 2
    STRING_M    shift, and go to state 3
    FUNCTION_M  shift, and go to state 4
    WHILE_M     shift, and go to state 5
    VAL_NAME    shift, and go to state 6

    all                  go to state 7
    sentence             go to state 8
    eval                 go to state 9
    function_defun_exp   go to state 10
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 1

   25 assign_expression: INTEGER_M . VAL_NAME ASSIGN expression
   28                  | INTEGER_M . VAL_NAME

    VAL_NAME  shift, and go to state 14


state 2

   26 assign_expression: DOUBLE_M . VAL_NAME ASSIGN expression
   29                  | DOUBLE_M . VAL_NAME

    VAL_NAME  shift, and go to state 15


state 3

   27 assign_expression: STRING_M . VAL_NAME ASSIGN expression
   30                  | STRING_M . VAL_NAME

    VAL_NAME  shift, and go to state 16


state 4

   20 function_defun_exp: FUNCTION_M . VAL_NAME SL statement_exp_list SR BL block_exp_list BR
   21                   | FUNCTION_M . VAL_NAME SL SR BL block_exp_list BR

    VAL_NAME  shift, and go to state 17


state 5

   22 while_expression: WHILE_M . SL expression SR BL block BR

    SL  shift, and go to state 18


state 6

   23 function_expression: VAL_NAME . SL argument_list SR
   24 assign_expression: VAL_NAME . ASSIGN expression

    ASSIGN  shift, and go to state 19
    SL      shift, and go to state 20


state 7

    0 $accept: all . $end
    3 all: all . function_defun_exp
    4    | all . sentence

    $end        shift, and go to state 21
    INTEGER_M   shift, and go to state 1
    DOUBLE_M    shift, and go to state 2
    STRING_M    shift, and go to state 3
    FUNCTION_M  shift, and go to state 4
    WHILE_M     shift, and go to state 5
    VAL_NAME    shift, and go to state 6

    sentence             go to state 22
    eval                 go to state 9
    function_defun_exp   go to state 23
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 8

    2 all: sentence .
   10 sentence: sentence .

    $end        reduce using rule 2 (all)
    $end        [reduce using rule 10 (sentence)]
    INTEGER_M   reduce using rule 2 (all)
    INTEGER_M   [reduce using rule 10 (sentence)]
    DOUBLE_M    reduce using rule 2 (all)
    DOUBLE_M    [reduce using rule 10 (sentence)]
    STRING_M    reduce using rule 2 (all)
    STRING_M    [reduce using rule 10 (sentence)]
    FUNCTION_M  reduce using rule 2 (all)
    FUNCTION_M  [reduce using rule 10 (sentence)]
    WHILE_M     reduce using rule 2 (all)
    WHILE_M     [reduce using rule 10 (sentence)]
    VAL_NAME    reduce using rule 2 (all)
    VAL_NAME    [reduce using rule 10 (sentence)]
    $default    reduce using rule 2 (all)


state 9

    9 sentence: eval . SEMICOLON

    SEMICOLON  shift, and go to state 24


state 10

    1 all: function_defun_exp .

    $default  reduce using rule 1 (all)


state 11

   13 eval: while_expression .

    $default  reduce using rule 13 (eval)


state 12

   12 eval: function_expression .

    $default  reduce using rule 12 (eval)


state 13

   11 eval: assign_expression .

    $default  reduce using rule 11 (eval)


state 14

   25 assign_expression: INTEGER_M VAL_NAME . ASSIGN expression
   28                  | INTEGER_M VAL_NAME .

    ASSIGN  shift, and go to state 25

    $default  reduce using rule 28 (assign_expression)


state 15

   26 assign_expression: DOUBLE_M VAL_NAME . ASSIGN expression
   29                  | DOUBLE_M VAL_NAME .

    ASSIGN  shift, and go to state 26

    $default  reduce using rule 29 (assign_expression)


state 16

   27 assign_expression: STRING_M VAL_NAME . ASSIGN expression
   30                  | STRING_M VAL_NAME .

    ASSIGN  shift, and go to state 27

    $default  reduce using rule 30 (assign_expression)


state 17

   20 function_defun_exp: FUNCTION_M VAL_NAME . SL statement_exp_list SR BL block_exp_list BR
   21                   | FUNCTION_M VAL_NAME . SL SR BL block_exp_list BR

    SL  shift, and go to state 28


state 18

   22 while_expression: WHILE_M SL . expression SR BL block BR

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 33
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 19

   24 assign_expression: VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 37
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 20

   23 function_expression: VAL_NAME SL . argument_list SR

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    argument_list     go to state 38
    expression        go to state 39
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 21

    0 $accept: all $end .

    $default  accept


state 22

    4 all: all sentence .
   10 sentence: sentence .

    $end        reduce using rule 4 (all)
    $end        [reduce using rule 10 (sentence)]
    INTEGER_M   reduce using rule 4 (all)
    INTEGER_M   [reduce using rule 10 (sentence)]
    DOUBLE_M    reduce using rule 4 (all)
    DOUBLE_M    [reduce using rule 10 (sentence)]
    STRING_M    reduce using rule 4 (all)
    STRING_M    [reduce using rule 10 (sentence)]
    FUNCTION_M  reduce using rule 4 (all)
    FUNCTION_M  [reduce using rule 10 (sentence)]
    WHILE_M     reduce using rule 4 (all)
    WHILE_M     [reduce using rule 10 (sentence)]
    VAL_NAME    reduce using rule 4 (all)
    VAL_NAME    [reduce using rule 10 (sentence)]
    $default    reduce using rule 4 (all)


state 23

    3 all: all function_defun_exp .

    $default  reduce using rule 3 (all)


state 24

    9 sentence: eval SEMICOLON .

    $default  reduce using rule 9 (sentence)


state 25

   25 assign_expression: INTEGER_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 40
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 26

   26 assign_expression: DOUBLE_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 41
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 27

   27 assign_expression: STRING_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 42
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 28

   20 function_defun_exp: FUNCTION_M VAL_NAME SL . statement_exp_list SR BL block_exp_list BR
   21                   | FUNCTION_M VAL_NAME SL . SR BL block_exp_list BR

    SR         shift, and go to state 43
    INTEGER_M  shift, and go to state 44
    DOUBLE_M   shift, and go to state 45

    statement_exp       go to state 46
    statement_exp_list  go to state 47


state 29

   47 primary_exp: INTEGER .

    $default  reduce using rule 47 (primary_exp)


state 30

   46 primary_exp: DOUBLE .

    $default  reduce using rule 46 (primary_exp)


state 31

   31 argument: VAL_NAME .

    $default  reduce using rule 31 (argument)


state 32

   48 primary_exp: argument .

    $default  reduce using rule 48 (primary_exp)


state 33

   22 while_expression: WHILE_M SL expression . SR BL block BR
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49
    SR   shift, and go to state 50


state 34

   34 expression: high_expression .
   38 high_expression: high_expression . MUL compa_expression
   39                | high_expression . DIV compa_expression

    MUL  shift, and go to state 51
    DIV  shift, and go to state 52

    $default  reduce using rule 34 (expression)


state 35

   37 high_expression: compa_expression .
   41 compa_expression: compa_expression . EQUAL primary_exp
   42                 | compa_expression . BIG_EQL primary_exp
   43                 | compa_expression . SMALL_EQL primary_exp
   44                 | compa_expression . BIG primary_exp
   45                 | compa_expression . SMALL primary_exp

    EQUAL      shift, and go to state 53
    BIG_EQL    shift, and go to state 54
    SMALL_EQL  shift, and go to state 55
    BIG        shift, and go to state 56
    SMALL      shift, and go to state 57

    $default  reduce using rule 37 (high_expression)


state 36

   40 compa_expression: primary_exp .

    $default  reduce using rule 40 (compa_expression)


state 37

   24 assign_expression: VAL_NAME ASSIGN expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 24 (assign_expression)


state 38

   23 function_expression: VAL_NAME SL argument_list . SR
   33 argument_list: argument_list . COMMA expression

    SR     shift, and go to state 58
    COMMA  shift, and go to state 59


state 39

   32 argument_list: expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 32 (argument_list)


state 40

   25 assign_expression: INTEGER_M VAL_NAME ASSIGN expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 25 (assign_expression)


state 41

   26 assign_expression: DOUBLE_M VAL_NAME ASSIGN expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 26 (assign_expression)


state 42

   27 assign_expression: STRING_M VAL_NAME ASSIGN expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 27 (assign_expression)


state 43

   21 function_defun_exp: FUNCTION_M VAL_NAME SL SR . BL block_exp_list BR

    BL  shift, and go to state 60


state 44

   14 statement_exp: INTEGER_M . VAL_NAME

    VAL_NAME  shift, and go to state 61


state 45

   15 statement_exp: DOUBLE_M . VAL_NAME

    VAL_NAME  shift, and go to state 62


state 46

   16 statement_exp_list: statement_exp .

    $default  reduce using rule 16 (statement_exp_list)


state 47

   17 statement_exp_list: statement_exp_list . COMMA statement_exp
   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list . SR BL block_exp_list BR

    SR     shift, and go to state 63
    COMMA  shift, and go to state 64


state 48

   35 expression: expression ADD . high_expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    high_expression   go to state 65
    compa_expression  go to state 35
    primary_exp       go to state 36


state 49

   36 expression: expression SUB . high_expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    high_expression   go to state 66
    compa_expression  go to state 35
    primary_exp       go to state 36


state 50

   22 while_expression: WHILE_M SL expression SR . BL block BR

    BL  shift, and go to state 67


state 51

   38 high_expression: high_expression MUL . compa_expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    compa_expression  go to state 68
    primary_exp       go to state 36


state 52

   39 high_expression: high_expression DIV . compa_expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    compa_expression  go to state 69
    primary_exp       go to state 36


state 53

   41 compa_expression: compa_expression EQUAL . primary_exp

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument     go to state 32
    primary_exp  go to state 70


state 54

   42 compa_expression: compa_expression BIG_EQL . primary_exp

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument     go to state 32
    primary_exp  go to state 71


state 55

   43 compa_expression: compa_expression SMALL_EQL . primary_exp

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument     go to state 32
    primary_exp  go to state 72


state 56

   44 compa_expression: compa_expression BIG . primary_exp

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument     go to state 32
    primary_exp  go to state 73


state 57

   45 compa_expression: compa_expression SMALL . primary_exp

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument     go to state 32
    primary_exp  go to state 74


state 58

   23 function_expression: VAL_NAME SL argument_list SR .

    $default  reduce using rule 23 (function_expression)


state 59

   33 argument_list: argument_list COMMA . expression

    INTEGER   shift, and go to state 29
    DOUBLE    shift, and go to state 30
    VAL_NAME  shift, and go to state 31

    argument          go to state 32
    expression        go to state 75
    high_expression   go to state 34
    compa_expression  go to state 35
    primary_exp       go to state 36


state 60

   21 function_defun_exp: FUNCTION_M VAL_NAME SL SR BL . block_exp_list BR

    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    WHILE_M    shift, and go to state 5
    VAL_NAME   shift, and go to state 6

    eval                 go to state 76
    block_exp_list       go to state 77
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 61

   14 statement_exp: INTEGER_M VAL_NAME .

    $default  reduce using rule 14 (statement_exp)


state 62

   15 statement_exp: DOUBLE_M VAL_NAME .

    $default  reduce using rule 15 (statement_exp)


state 63

   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list SR . BL block_exp_list BR

    BL  shift, and go to state 78


state 64

   17 statement_exp_list: statement_exp_list COMMA . statement_exp

    INTEGER_M  shift, and go to state 44
    DOUBLE_M   shift, and go to state 45

    statement_exp  go to state 79


state 65

   35 expression: expression ADD high_expression .
   38 high_expression: high_expression . MUL compa_expression
   39                | high_expression . DIV compa_expression

    MUL  shift, and go to state 51
    DIV  shift, and go to state 52

    $default  reduce using rule 35 (expression)


state 66

   36 expression: expression SUB high_expression .
   38 high_expression: high_expression . MUL compa_expression
   39                | high_expression . DIV compa_expression

    MUL  shift, and go to state 51
    DIV  shift, and go to state 52

    $default  reduce using rule 36 (expression)


state 67

   22 while_expression: WHILE_M SL expression SR BL . block BR

    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    WHILE_M    shift, and go to state 5
    VAL_NAME   shift, and go to state 6

    block                go to state 80
    while_sentence       go to state 81
    eval                 go to state 82
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 68

   38 high_expression: high_expression MUL compa_expression .
   41 compa_expression: compa_expression . EQUAL primary_exp
   42                 | compa_expression . BIG_EQL primary_exp
   43                 | compa_expression . SMALL_EQL primary_exp
   44                 | compa_expression . BIG primary_exp
   45                 | compa_expression . SMALL primary_exp

    EQUAL      shift, and go to state 53
    BIG_EQL    shift, and go to state 54
    SMALL_EQL  shift, and go to state 55
    BIG        shift, and go to state 56
    SMALL      shift, and go to state 57

    $default  reduce using rule 38 (high_expression)


state 69

   39 high_expression: high_expression DIV compa_expression .
   41 compa_expression: compa_expression . EQUAL primary_exp
   42                 | compa_expression . BIG_EQL primary_exp
   43                 | compa_expression . SMALL_EQL primary_exp
   44                 | compa_expression . BIG primary_exp
   45                 | compa_expression . SMALL primary_exp

    EQUAL      shift, and go to state 53
    BIG_EQL    shift, and go to state 54
    SMALL_EQL  shift, and go to state 55
    BIG        shift, and go to state 56
    SMALL      shift, and go to state 57

    $default  reduce using rule 39 (high_expression)


state 70

   41 compa_expression: compa_expression EQUAL primary_exp .

    $default  reduce using rule 41 (compa_expression)


state 71

   42 compa_expression: compa_expression BIG_EQL primary_exp .

    $default  reduce using rule 42 (compa_expression)


state 72

   43 compa_expression: compa_expression SMALL_EQL primary_exp .

    $default  reduce using rule 43 (compa_expression)


state 73

   44 compa_expression: compa_expression BIG primary_exp .

    $default  reduce using rule 44 (compa_expression)


state 74

   45 compa_expression: compa_expression SMALL primary_exp .

    $default  reduce using rule 45 (compa_expression)


state 75

   33 argument_list: argument_list COMMA expression .
   35 expression: expression . ADD high_expression
   36           | expression . SUB high_expression

    ADD  shift, and go to state 48
    SUB  shift, and go to state 49

    $default  reduce using rule 33 (argument_list)


state 76

   18 block_exp_list: eval .

    $default  reduce using rule 18 (block_exp_list)


state 77

   19 block_exp_list: block_exp_list . SEMICOLON eval
   21 function_defun_exp: FUNCTION_M VAL_NAME SL SR BL block_exp_list . BR

    SEMICOLON  shift, and go to state 83
    BR         shift, and go to state 84


state 78

   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list SR BL . block_exp_list BR

    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    WHILE_M    shift, and go to state 5
    VAL_NAME   shift, and go to state 6

    eval                 go to state 76
    block_exp_list       go to state 85
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 79

   17 statement_exp_list: statement_exp_list COMMA statement_exp .

    $default  reduce using rule 17 (statement_exp_list)


state 80

    6 block: block . while_sentence
   22 while_expression: WHILE_M SL expression SR BL block . BR

    BR         shift, and go to state 86
    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    WHILE_M    shift, and go to state 5
    VAL_NAME   shift, and go to state 6

    while_sentence       go to state 87
    eval                 go to state 82
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 81

    5 block: while_sentence .
    8 while_sentence: while_sentence .

    BR         reduce using rule 5 (block)
    BR         [reduce using rule 8 (while_sentence)]
    INTEGER_M  reduce using rule 5 (block)
    INTEGER_M  [reduce using rule 8 (while_sentence)]
    DOUBLE_M   reduce using rule 5 (block)
    DOUBLE_M   [reduce using rule 8 (while_sentence)]
    STRING_M   reduce using rule 5 (block)
    STRING_M   [reduce using rule 8 (while_sentence)]
    WHILE_M    reduce using rule 5 (block)
    WHILE_M    [reduce using rule 8 (while_sentence)]
    VAL_NAME   reduce using rule 5 (block)
    VAL_NAME   [reduce using rule 8 (while_sentence)]
    $default   reduce using rule 5 (block)


state 82

    7 while_sentence: eval . SEMICOLON

    SEMICOLON  shift, and go to state 88


state 83

   19 block_exp_list: block_exp_list SEMICOLON . eval

    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    WHILE_M    shift, and go to state 5
    VAL_NAME   shift, and go to state 6

    eval                 go to state 89
    while_expression     go to state 11
    function_expression  go to state 12
    assign_expression    go to state 13


state 84

   21 function_defun_exp: FUNCTION_M VAL_NAME SL SR BL block_exp_list BR .

    $default  reduce using rule 21 (function_defun_exp)


state 85

   19 block_exp_list: block_exp_list . SEMICOLON eval
   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list SR BL block_exp_list . BR

    SEMICOLON  shift, and go to state 83
    BR         shift, and go to state 90


state 86

   22 while_expression: WHILE_M SL expression SR BL block BR .

    $default  reduce using rule 22 (while_expression)


state 87

    6 block: block while_sentence .
    8 while_sentence: while_sentence .

    BR         reduce using rule 6 (block)
    BR         [reduce using rule 8 (while_sentence)]
    INTEGER_M  reduce using rule 6 (block)
    INTEGER_M  [reduce using rule 8 (while_sentence)]
    DOUBLE_M   reduce using rule 6 (block)
    DOUBLE_M   [reduce using rule 8 (while_sentence)]
    STRING_M   reduce using rule 6 (block)
    STRING_M   [reduce using rule 8 (while_sentence)]
    WHILE_M    reduce using rule 6 (block)
    WHILE_M    [reduce using rule 8 (while_sentence)]
    VAL_NAME   reduce using rule 6 (block)
    VAL_NAME   [reduce using rule 8 (while_sentence)]
    $default   reduce using rule 6 (block)


state 88

    7 while_sentence: eval SEMICOLON .

    $default  reduce using rule 7 (while_sentence)


state 89

   19 block_exp_list: block_exp_list SEMICOLON eval .

    $default  reduce using rule 19 (block_exp_list)


state 90

   20 function_defun_exp: FUNCTION_M VAL_NAME SL statement_exp_list SR BL block_exp_list BR .

    $default  reduce using rule 20 (function_defun_exp)

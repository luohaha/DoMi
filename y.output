Terminals which are not used

   EQUAL
   BL
   BR
   QUOT
   FUNCTION_M


Rules never reduced

    4 sentence: sentence


State 6 conflicts: 5 reduce/reduce
State 16 conflicts: 5 reduce/reduce


Grammar

    0 $accept: all $end

    1 all: sentence
    2    | all sentence

    3 sentence: eval SEMICOLON
    4         | sentence

    5 eval: assign_expression
    6     | function_expression

    7 function_expression: VAL_NAME SL argument_list SR

    8 assign_expression: VAL_NAME ASSIGN expression
    9                  | INTEGER_M VAL_NAME ASSIGN expression
   10                  | DOUBLE_M VAL_NAME ASSIGN expression
   11                  | STRING_M VAL_NAME ASSIGN expression
   12                  | INTEGER_M VAL_NAME
   13                  | DOUBLE_M VAL_NAME
   14                  | STRING_M VAL_NAME

   15 argument: VAL_NAME

   16 argument_list: expression
   17              | argument_list COMMA expression

   18 expression: high_expression
   19           | expression ADD high_expression
   20           | expression SUB high_expression

   21 high_expression: primary_exp
   22                | high_expression MUL primary_exp
   23                | high_expression DIV primary_exp

   24 primary_exp: DOUBLE
   25            | INTEGER
   26            | argument


Terminals, with rules where they appear

$end (0) 0
error (256)
ADD (258) 19
SUB (259) 20
MUL (260) 22
DIV (261) 23
EQUAL (262)
ASSIGN (263) 8 9 10 11
SEMICOLON (264) 3
BL (265)
BR (266)
SL (267) 7
SR (268) 7
QUOT (269)
INTEGER_M (270) 9 12
DOUBLE_M (271) 10 13
STRING_M (272) 11 14
COMMA (273) 17
FUNCTION_M (274)
INTEGER (275) 25
DOUBLE (276) 24
VAL_NAME (277) 7 8 9 10 11 12 13 14 15


Nonterminals, with rules where they appear

$accept (23)
    on left: 0
all (24)
    on left: 1 2, on right: 0 2
sentence (25)
    on left: 3 4, on right: 1 2 4
eval (26)
    on left: 5 6, on right: 3
function_expression (27)
    on left: 7, on right: 6
assign_expression (28)
    on left: 8 9 10 11 12 13 14, on right: 5
argument (29)
    on left: 15, on right: 26
argument_list (30)
    on left: 16 17, on right: 7 17
expression (31)
    on left: 18 19 20, on right: 8 9 10 11 16 17 19 20
high_expression (32)
    on left: 21 22 23, on right: 18 19 20 22 23
primary_exp (33)
    on left: 24 25 26, on right: 21 22 23


state 0

    0 $accept: . all $end

    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    VAL_NAME   shift, and go to state 4

    all                  go to state 5
    sentence             go to state 6
    eval                 go to state 7
    function_expression  go to state 8
    assign_expression    go to state 9


state 1

    9 assign_expression: INTEGER_M . VAL_NAME ASSIGN expression
   12                  | INTEGER_M . VAL_NAME

    VAL_NAME  shift, and go to state 10


state 2

   10 assign_expression: DOUBLE_M . VAL_NAME ASSIGN expression
   13                  | DOUBLE_M . VAL_NAME

    VAL_NAME  shift, and go to state 11


state 3

   11 assign_expression: STRING_M . VAL_NAME ASSIGN expression
   14                  | STRING_M . VAL_NAME

    VAL_NAME  shift, and go to state 12


state 4

    7 function_expression: VAL_NAME . SL argument_list SR
    8 assign_expression: VAL_NAME . ASSIGN expression

    ASSIGN  shift, and go to state 13
    SL      shift, and go to state 14


state 5

    0 $accept: all . $end
    2 all: all . sentence

    $end       shift, and go to state 15
    INTEGER_M  shift, and go to state 1
    DOUBLE_M   shift, and go to state 2
    STRING_M   shift, and go to state 3
    VAL_NAME   shift, and go to state 4

    sentence             go to state 16
    eval                 go to state 7
    function_expression  go to state 8
    assign_expression    go to state 9


state 6

    1 all: sentence .
    4 sentence: sentence .

    $end       reduce using rule 1 (all)
    $end       [reduce using rule 4 (sentence)]
    INTEGER_M  reduce using rule 1 (all)
    INTEGER_M  [reduce using rule 4 (sentence)]
    DOUBLE_M   reduce using rule 1 (all)
    DOUBLE_M   [reduce using rule 4 (sentence)]
    STRING_M   reduce using rule 1 (all)
    STRING_M   [reduce using rule 4 (sentence)]
    VAL_NAME   reduce using rule 1 (all)
    VAL_NAME   [reduce using rule 4 (sentence)]
    $default   reduce using rule 1 (all)


state 7

    3 sentence: eval . SEMICOLON

    SEMICOLON  shift, and go to state 17


state 8

    6 eval: function_expression .

    $default  reduce using rule 6 (eval)


state 9

    5 eval: assign_expression .

    $default  reduce using rule 5 (eval)


state 10

    9 assign_expression: INTEGER_M VAL_NAME . ASSIGN expression
   12                  | INTEGER_M VAL_NAME .

    ASSIGN  shift, and go to state 18

    $default  reduce using rule 12 (assign_expression)


state 11

   10 assign_expression: DOUBLE_M VAL_NAME . ASSIGN expression
   13                  | DOUBLE_M VAL_NAME .

    ASSIGN  shift, and go to state 19

    $default  reduce using rule 13 (assign_expression)


state 12

   11 assign_expression: STRING_M VAL_NAME . ASSIGN expression
   14                  | STRING_M VAL_NAME .

    ASSIGN  shift, and go to state 20

    $default  reduce using rule 14 (assign_expression)


state 13

    8 assign_expression: VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    expression       go to state 25
    high_expression  go to state 26
    primary_exp      go to state 27


state 14

    7 function_expression: VAL_NAME SL . argument_list SR

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    argument_list    go to state 28
    expression       go to state 29
    high_expression  go to state 26
    primary_exp      go to state 27


state 15

    0 $accept: all $end .

    $default  accept


state 16

    2 all: all sentence .
    4 sentence: sentence .

    $end       reduce using rule 2 (all)
    $end       [reduce using rule 4 (sentence)]
    INTEGER_M  reduce using rule 2 (all)
    INTEGER_M  [reduce using rule 4 (sentence)]
    DOUBLE_M   reduce using rule 2 (all)
    DOUBLE_M   [reduce using rule 4 (sentence)]
    STRING_M   reduce using rule 2 (all)
    STRING_M   [reduce using rule 4 (sentence)]
    VAL_NAME   reduce using rule 2 (all)
    VAL_NAME   [reduce using rule 4 (sentence)]
    $default   reduce using rule 2 (all)


state 17

    3 sentence: eval SEMICOLON .

    $default  reduce using rule 3 (sentence)


state 18

    9 assign_expression: INTEGER_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    expression       go to state 30
    high_expression  go to state 26
    primary_exp      go to state 27


state 19

   10 assign_expression: DOUBLE_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    expression       go to state 31
    high_expression  go to state 26
    primary_exp      go to state 27


state 20

   11 assign_expression: STRING_M VAL_NAME ASSIGN . expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    expression       go to state 32
    high_expression  go to state 26
    primary_exp      go to state 27


state 21

   25 primary_exp: INTEGER .

    $default  reduce using rule 25 (primary_exp)


state 22

   24 primary_exp: DOUBLE .

    $default  reduce using rule 24 (primary_exp)


state 23

   15 argument: VAL_NAME .

    $default  reduce using rule 15 (argument)


state 24

   26 primary_exp: argument .

    $default  reduce using rule 26 (primary_exp)


state 25

    8 assign_expression: VAL_NAME ASSIGN expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 8 (assign_expression)


state 26

   18 expression: high_expression .
   22 high_expression: high_expression . MUL primary_exp
   23                | high_expression . DIV primary_exp

    MUL  shift, and go to state 35
    DIV  shift, and go to state 36

    $default  reduce using rule 18 (expression)


state 27

   21 high_expression: primary_exp .

    $default  reduce using rule 21 (high_expression)


state 28

    7 function_expression: VAL_NAME SL argument_list . SR
   17 argument_list: argument_list . COMMA expression

    SR     shift, and go to state 37
    COMMA  shift, and go to state 38


state 29

   16 argument_list: expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 16 (argument_list)


state 30

    9 assign_expression: INTEGER_M VAL_NAME ASSIGN expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 9 (assign_expression)


state 31

   10 assign_expression: DOUBLE_M VAL_NAME ASSIGN expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 10 (assign_expression)


state 32

   11 assign_expression: STRING_M VAL_NAME ASSIGN expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 11 (assign_expression)


state 33

   19 expression: expression ADD . high_expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    high_expression  go to state 39
    primary_exp      go to state 27


state 34

   20 expression: expression SUB . high_expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    high_expression  go to state 40
    primary_exp      go to state 27


state 35

   22 high_expression: high_expression MUL . primary_exp

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument     go to state 24
    primary_exp  go to state 41


state 36

   23 high_expression: high_expression DIV . primary_exp

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument     go to state 24
    primary_exp  go to state 42


state 37

    7 function_expression: VAL_NAME SL argument_list SR .

    $default  reduce using rule 7 (function_expression)


state 38

   17 argument_list: argument_list COMMA . expression

    INTEGER   shift, and go to state 21
    DOUBLE    shift, and go to state 22
    VAL_NAME  shift, and go to state 23

    argument         go to state 24
    expression       go to state 43
    high_expression  go to state 26
    primary_exp      go to state 27


state 39

   19 expression: expression ADD high_expression .
   22 high_expression: high_expression . MUL primary_exp
   23                | high_expression . DIV primary_exp

    MUL  shift, and go to state 35
    DIV  shift, and go to state 36

    $default  reduce using rule 19 (expression)


state 40

   20 expression: expression SUB high_expression .
   22 high_expression: high_expression . MUL primary_exp
   23                | high_expression . DIV primary_exp

    MUL  shift, and go to state 35
    DIV  shift, and go to state 36

    $default  reduce using rule 20 (expression)


state 41

   22 high_expression: high_expression MUL primary_exp .

    $default  reduce using rule 22 (high_expression)


state 42

   23 high_expression: high_expression DIV primary_exp .

    $default  reduce using rule 23 (high_expression)


state 43

   17 argument_list: argument_list COMMA expression .
   19 expression: expression . ADD high_expression
   20           | expression . SUB high_expression

    ADD  shift, and go to state 33
    SUB  shift, and go to state 34

    $default  reduce using rule 17 (argument_list)
